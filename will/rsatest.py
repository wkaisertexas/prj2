import timeit
import uva_rsa
import secrets

def get_decrypt_timing(reps,oracle,ct):
    start = timeit.default_timer()
    for _ in range(reps):
        oracle.run_6bits(ct)
    end = timeit.default_timer()
    return (end - start)/reps

def prefix(integer, bitlen):
    bits = format(integer, 'b')
    bits = bits.zfill(2048)[0:bitlen]
    return int(bits, 2)



pub_e = 65537
pub_n = 26334846008439167556765994336545761339068098619101850421771908459419918602128141355234077943248935530058859245371916765929458717691408496374069803243864206525054456891054239459424634162712907872176687992073038190824711743119057398524481757063408686486317239808826593650469866307923539528308953119230902384306178943542441126686061578352279102334653866502920311536313397546287885026738627086034614799371467801646963827587890747711299932470791488642354928910842955461742067813873505900679667440625963269380243732319252322289624537679679000548719937080897079171234468074929759669376046003568677119493377927698383184444971
key1 = {"e": 65537,
"n": 26334846008439167556765994336545761339068098619101850421771908459419918602128141355234077943248935530058859245371916765929458717691408496374069803243864206525054456891054239459424634162712907872176687992073038190824711743119057398524481757063408686486317239808826593650469866307923539528308953119230902384306178943542441126686061578352279102334653866502920311536313397546287885026738627086034614799371467801646963827587890747711299932470791488642354928910842955461742067813873505900679667440625963269380243732319252322289624537679679000548719937080897079171234468074929759669376046003568677119493377927698383184444971,
"d": 4150452954516788305322334373505934224092414147025341858259381425646659178605691706486212654370727684626846117494529293210823262969746501329504015330861438248564932422166878714870792714969678806278402238259157411843640134215067682273010431589510827287426792759999212883054785908980030403151122652491713875272966953950697706468122810899702465849201975767642644740088526762001961677935216877828845320587721250185528209814840248616253000685484141272453417580384407258920262649904440074465914446977660642607238586680208905768616792883391776390693711645020742189552372320510460581645319646313943217496379479242398240521369}
key = key1
oracle = uva_rsa.DecryptOracleA(key["d"], key["n"])
ct = int('1'*2048,2)#uva_rsa.rsa_enc(pub_e, pub_n, 0xffffff)

# all_bitstrings = [i << 2042 for i in range(64)]
# #all_bitstrings = [int('1' + '0'*2047,2),int('01' + '0'*2046,2),int('001' + '0'*2045,2),int('0001' + '0'*2044,2),int('00001' + '0'*2043,2),int('000001' + '0'*2041,2)]
# all_oracles = [uva_rsa.DecryptOracleA(bitstring,pub_n) for bitstring in all_bitstrings]

# reps = 1000
# res_list = [0 for _ in range(64)]

# potential_cts = [i<<2042 for i in range(64)]
# for _ in range(100):
#     potenital_sk_timings = []
#     ct = secrets.randbits(2048)
#     for potential_oracle in all_oracles:
#         potential_timing = get_decrypt_timing(reps,potential_oracle,ct)
#         potenital_sk_timings.append(potential_timing)

#     #print(potenital_sk_timings)

#     actual_timing = get_decrypt_timing(reps,oracle,ct)
#     #print(actual_timing)

#     closest_index,closest_value , = min(enumerate(potenital_sk_timings), key=lambda timing: abs(timing[1] - actual_timing))
#     if closest_index > 63:
#         print(f"index: {closest_index}, time: {closest_value}")
#         print(potenital_sk_timings)
#     print(closest_index)
#     res_list[closest_index] = res_list[closest_index] + 1
#     #print(closest_index,closest_value)
#     #print(uva_rsa.prefix(key["d"], 6))
#     #print(prefix(all_bitstrings[closest_index],6))


# print(f"Reps: {reps}")
# for index, value in enumerate(res_list):
#     print(f"Index: {index}, Value: {value}")

